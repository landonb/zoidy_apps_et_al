---

# Ref:
#
#   https://golang.org/project/
#
#   https://golang.org/dl/

# *** Local variables (Facts).

- set_fact:
    GOLANG_VER: '1.11.4'

- set_fact:
    GOLANG_DIR: "go{{ GOLANG_VER }}.linux-amd64"

- set_fact:
    GOLANG_TAR: "{{ GOLANG_DIR }}.tar.gz"

- set_fact:
    # E.g.,
    #   https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz
    GOLANG_URI: "https://dl.google.com/go/{{ GOLANG_TAR }}"
    GOLANG_XSUM: "fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b"

# *** Alert user if newer version.

# NOTE: 2019-03-19: Surprisingly, fetching golang archive can be a while, e.g., 17.09s.
# So skip if already downloaded.
- name: Stat golang release archive
  stat: path="{{ zoidy_homefries_downloads_dir }}/{{ GOLANG_TAR }}"
  register: golang_tar_f

# FIXME/2018-12-23: Run this and other curl's, or check GitHubs, for latest versions (of things).

- name: Fetch latest golang release
  get_url:
    url: "{{ GOLANG_URI }}"
    dest: "{{ zoidy_homefries_downloads_dir }}/"
    checksum: "sha256:{{ GOLANG_XSUM }}"
  when: not golang_tar_f.stat.exists

# The archive is contained within a directory not named with the version,
# i.e., simply 'go', so use the full archive name.
- name: Ensure user ~/.local/bin directory exists
  file: path="{{ zoidy_homefries_downloads_dir }}/{{ GOLANG_DIR }}" state=directory
  tags: always

- name: Unarchive the golang release archive
  unarchive:
    src: "{{ zoidy_homefries_downloads_dir }}/{{ GOLANG_TAR }}"
    dest: "{{ zoidy_homefries_downloads_dir }}/{{ GOLANG_DIR }}/"
    remote_src: yes

# Done:
#  - fail: msg="VERIFY UNPACK"

- name: Symlink golang binary from user local bin
  file:
    src: "{{ zoidy_homefries_downloads_dir }}/{{ GOLANG_DIR }}/go/bin/{{ item }}"
    dest: "{{ ansible_env.HOME }}/.local/bin/{{ item }}"
    state: link
  loop:
    - go
    - godoc
    - gofmt

