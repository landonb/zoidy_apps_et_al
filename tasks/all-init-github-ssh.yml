---

# *** Verify/Setup ~/.ssh/config

- name: Check SSH config or create fresh, for GitHub key
  stat: path="{{ ansible_env.HOME }}/.ssh/config"
  register: ssh_config_f

- name: Deploy SSH config, if necessary
  template:
    src: ../templates/ssh-config.j2
    dest: "{{ ansible_env.HOME }}/.ssh/config"
  when: not ssh_config_f.stat.exists

- name: Ensure proper permissions on SSH config
  file:
    path: "{{ ansible_env.HOME }}/.ssh/config"
    mode: 0600
    follow: yes

# *** Verify/Setup, e.g., ~/.ssh/id_user_rsa

- name: Stat GitHub SSH key (local)
  delegate_to: localhost
  stat: path="{{ ansible_env.HOME }}/.ssh/{{ zoidy_homefries_github_file }}"
  register: ssh_github_f_local

- fail: msg="Please ensure GitHub SSH key exists of the controller node"
  when: not ssh_github_f_local.stat.exists

- name: Stat GitHub SSH key (remote)
  stat: path="{{ ansible_env.HOME }}/.ssh/{{ zoidy_homefries_github_file }}"
  register: ssh_github_f_remote

- name: Copy GitHub SSH key (private)
  copy:
    src: "~/.ssh/{{ zoidy_homefries_github_file }}"
    dest: "~/.ssh/{{ zoidy_homefries_github_file }}"
    local_follow: true
    remote_src: false
  when: not ssh_github_f_remote.stat.exists

- name: Copy GitHub SSH key (public)
  copy:
    src: "~/.ssh/{{ zoidy_homefries_github_file }}.pub"
    dest: "~/.ssh/{{ zoidy_homefries_github_file }}.pub"
    local_follow: true
    remote_src: false
  when: not ssh_github_f_remote.stat.exists

- name: Ensure proper permissions on SSH GitHub key (private)
  file:
    path: "{{ ansible_env.HOME }}/.ssh/{{ zoidy_homefries_github_file }}"
    mode: 0400
    follow: yes

- name: Ensure proper permissions on SSH GitHub key (public)
  file:
    path: "{{ ansible_env.HOME }}/.ssh/{{ zoidy_homefries_github_file }}.pub"
    mode: 0440
    follow: yes

# *** Verify/Setup ~/.ssh/known_hosts.

- name: Stat SSH known_hosts
  stat: path="{{ ansible_env.HOME }}/.ssh/known_hosts"
  register: ssh_known_hosts_f

# Add GitHub to trusted hosts. Otherwise, interruption, e.g.,
#   $ ssh -T git@github.com
#   The authenticity of host 'github.com (192.30.253.113)' can't be established.
#   RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
#   Are you sure you want to continue connecting (yes/no)? ^C
#
# - MAYBE/2019-03-14: Should we actually check the fingerprint?
#   - CXREF:
#       https://help.github.com/en/articles/githubs-ssh-key-fingerprints
#     (lb): I bet `expect -re` could do it easily, just gotta figure out
#     how to not just `send` on timeout (and not to timeout, but to reject
#     non-match).
# SAVVY/2019-03-14: (lb): I tried using expect with ssh -T, but what a mess.
# It's easier to use the actual command built to produce known_hosts entries,
# ssh-keyscan.
- name: Add GitHub to known_hosts, perhaps
  ansible.builtin.shell: |
    ssh-keyscan github.com >> "{{ ansible_env.HOME }}/.ssh/known_hosts"
  args:
    # Specify creates, so task only runs if file not yet created.
    creates: "{{ ansible_env.HOME }}/.ssh/known_hosts"
  # This 'when' is redundant because 'creates' check, but adds readability.
  when: not ssh_known_hosts_f.stat.exists

- name: Ensure proper permissions on SSH known_host
  file:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    mode: 0600
    follow: yes

# *** Verify GH SSH setup.

- name: Determine if github.com is a known host
  # (lb): Huh: If we use &> here, and not 2>&1, return code is 0, not nonzero.
  # E.g.,
  #   ansible.builtin.shell: ssh-keygen -F github.com &> /dev/null
  ansible.builtin.shell: ssh-keygen -F github.com >/dev/null 2>&1
  register: gh_known
  ignore_errors: yes

- fail: msg="Please setup the machine's GitHub SSH key first"
  when: gh_known.rc != 0

