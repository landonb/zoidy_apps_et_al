---

# - Ref:
#
#     https://wiki.gnucash.org/wiki/Building_On_Linux

# ***

- set_fact:
    # 2020-05-02: How have I not been using GnuCash for the past 2 decades??
    # This app rocks.
    #  GNUCASH_BRANCH: "3.10"
    #
    # 2020-11-14: I was looking for a way to run reports from the CLI
    # (e.g., so I can dump portfolio data to CSV, import to a spreadsheet,
    # and do my own analysis), and -- lo! -- the awesome GnuCash devs added
    # a GNC CLI in 4.0, how sweet!
    #  GNUCASH_BRANCH: "4.2"
    # 2021-03-13:
    #  GNUCASH_BRANCH: "4.4"
    # 2021-09-10: The "Edit..." button for Invoice Group does not work...:
    GNUCASH_BRANCH: "4.6"

- set_fact:
    GNUCASH_FORCE: False
    # DEV: Set this True if you want to build even if build directory exists.
    #  GNUCASH_FORCE: True

# ***

- set_fact:
    GNUCASH_DIR: "{{ zoidy_homefries_gnucash_repo_path }}"

- set_fact:
    # Default checkout path if not specially specified.
    GNUCASH_DIR: "{{ zoidy_homefries_downloads_dir }}/gnucash"
  when: GNUCASH_DIR == ""

# ***

# Specify the DISPLAY, otherwise fails, because Ansible runs over SSH, and:
#
#   $ ssh $(hostname)
#   (ssh) $ gnucash --version
#   Unable to init server: Could not connect: Connection refused
#   Run 'g --help' to see a full list of available command line options.
#   Error: could not initialize graphical user interface and option add-price-quotes was not set.
#          Perhaps you need to set the $DISPLAY environment variable ?
- name: gnucash » Check active version
  ansible.builtin.shell: >
    DISPLAY=:0 ./gnucash --version | head -1 \
    | grep -q '^GnuCash {{ GNUCASH_BRANCH }}\b' \
    && printf 'OK'
    || true
  args:
    chdir: "{{ ansible_env.HOME }}/.local/bin"
  register: gncvers_output
  ignore_errors: yes

- name: gnucash » Announce version results
  debug:
    msg: >
          Your GnuCash is already up to date!
  when: gncvers_output.stdout == 'OK'

- meta: end_play
  when: gncvers_output.stdout == 'OK' and not GNUCASH_FORCE

# ***

- name: gnucash ∷ git clone
  git:
    repo: "git@github.com:Gnucash/gnucash.git"
    dest: "{{ GNUCASH_DIR }}"
    remote: "{{ zoidy_homefries_gnucash_repo_remote }}"
    # Releases are tagged, which we have to deal with in post.
    version: "maint"
  # LATER/2020-05-02: Check for newer version.
  # - See git-bump-version-tag for help reading latest version tag.
  # MEH/2020-11-15: On second thought, don't really care.
  # - Probably most useful if you made a new playbook whose tasks
  #   only checked for most recent versions of tools...
  #   but also seems tedious and not worth the effort
  #   (i.e., you'll update an app when you find out a
  #   newer version has a feature you want, and you won't
  #   update for the sake of updating).
  # - You could also make the `cmake` command below reentrant,
  #   so that calling this task repeatedly doesn't waste time
  #   re-downloading and re-building the same GnuCash as what's
  #   installed... but, again, seems like a tedious proposition.

- name: gnucash » checkout version branch
  ansible.builtin.shell: git checkout rel/{{ GNUCASH_BRANCH }}
  args:
    chdir: "{{ GNUCASH_DIR }}"
  register: gitco_output
  ignore_errors: yes

- name: gnucash » create version branch
  ansible.builtin.shell: git checkout tags/{{ GNUCASH_BRANCH }} -b rel/{{ GNUCASH_BRANCH }}
  args:
    chdir: "{{ GNUCASH_DIR }}"
  when: gitco_output.rc != 0

# ***

- name: Run command "apt-get update" (app-gnucash)
  become: true
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: False

- name: gnucash » ensure dependencies present(ly installed)
  apt: name="{{ item }}" state="present"
  become: true
  loop:
    # v4.2
    # ----
    # 2020-11-15: (lb): I assembled this list from the GnuCash Wiki.
    #   https://wiki.gnucash.org/wiki/Installing_Dependencies
    # See also in source:
    #   README.dependencies
    # - Note that neither Wiki nor source document are necessarily up to date.
    #   - E.g., I was able to build with versions indicated in the Wiki,
    #     but then at runtime I found issues, such as:
    #     - "boost > 1.50.0", but GnuCash complains unless 1.67 or better.
    #     - "guile >= 2.0.0", but `gnucash-cli --report ...` prints ERRORs
    #       when built and used with guile 2.0.
    # - I've also included additional libraries that I found (through make
    #   trial-and-error) that I needed to build v3.10 (and that I didn't
    #   bother to determine if I still need to build v4.2; it's easier
    #   just to keep them).
    #
    # *** libtool
    - libtool
    - libltdl-dev
    # *** icu
    - icu-devtools
    - libicu-dev
    # *** "glib2 > v2.40.0"
    - libglib2.0-0
    - libglib2.0-dev
    # *** "boost > 1.50.0 - requires locale and regex built with ICU support"
    # - See the `lib-libboost` task.
    # - Or, if the host's distro includes > 1.67, try:
    #   - libboost-all-dev
    # *** "guile >= 2.0.0"
    # - I found that I need guile-2.2.
    #   (I also tried (and failed) to use guile 3.0 (installed from source)
    #   but that's a longer tale, and if guile 2.2 works, I'm happy.)
    - guile-2.2
    - guile-2.2-dev
    # *** "swig > 2.0.10 - swig3.0 on some systems"
    # (lb): Yup, there's no swig2.0 on Mint 19.3. It's `swig` or `swig3.0`.
    - swig3.0
    # *** libxml*
    - libxml2
    # (lb): NOTE: apt-search requires quotes and escapes:
    #               apt search 'libxml\+\+2.6-dev'
    #             but not apt-install...
    #               apt install libxml++2.6-dev
    - libxml++2.6-dev
    - libxml2-utils
    # *** libxslt1
    - libxslt1.1
    - libxslt1-dev
    # *** xsltproc
    - xsltproc
    # *** "texinfo required for makeinfo"
    - texinfo
    # *** libsecret-1
    - libsecret-1-0
    - libsecret-1-dev
    #
    # "Only use the next 2 lines if you have not installed [[Google_Test | Google Test]] already."
    # ">= 1.7.0"
    - libgtest-dev
    # "1.8.0 installs googlemock in a subdirectory of gtest"
    - google-mock
    #
    # "gtk+3.0 >= 3.22.30"
    - libgtk-3-dev
    - libgtk-3-bin
    #
    # "> webkit2gtk-3.0"
    - libwebkit2gtk-4.0-37
    - libwebkit2gtk-4.0-dev

    # v4.2 Optional: Database Backend
    # -------------------------------
    # libdbi*: "# > v0.8.3"
    - libdbi1
    - libdbi-dev
    # "and at least one of the following database backends:"
    - libdbd-pgsql
    - libdbd-mysql
    - libdbd-sqlite3

    # v4.2 Optional: OFX File importing
    # ---------------------------------
    # "This will automatically install the corresponding libofx<n> package as well."
    - libofx-dev

    # v4.2 Optional: AqBanking (Online Banking)
    # -----------------------------------------
    # *aqbanking*: "# > v4.0.0"
    - aqbanking-tools
    - libaqbanking-dev
    # *gwenhywfar*
    - gwenhywfar-tools
    - libgwenhywfar60
    - libgwenhywfar60-dev
    # 2020-11-15: I found (make trial-and-error discovered) that I needed
    # this library to build v3.10. Not sure about v4.2. (But for v3.10, I
    # had not installed gwenhywfar-tools or libgwenhywfar60-dev.)
    - libgwenhywfar-core-dev
    # libgwengui*: "included in tarball prior to v3.905/V4 beta"
    # 2020-11-15: Linux Mint 19.3 (Ubuntu 18.04) has *-0 variant of this lib:
    #  - libgwengui-gtk3
    - libgwengui-gtk3-0
    - libgwengui-gtk3-dev

    # v4.2 Optional: Python Support (Python Bindings)
    # -----------------------------------------------
    # NOTE: Not including. But if you do:
    #   "use the appropriate cmake option switch during the build"
    #  - python3-pytest

    # v4.2 Distribution-Specific *Focal Fossa 20.04 LTS* Issue
    # --------------------------------------------------------
    # If you were to run `apt-get build-dep gnucash`, per
    #   https://wiki.gnucash.org/wiki/Building_On_Linux
    # then you need to manually install this library as well:
    #  - libboost-program-options1.71-dev
    # (lb): Except I don't (yet) have a 20.04 host, and (probably more
    # importantly) I'm not calling build-dep (instead see list of deps
    # above), oh and also see `lib-libboost` which installs this lib to:
    #   ~/.local/include/boost_1_74_0/libs/program_options/

    # v4.2 Unknown: Libraries I needed to build v3.10
    # -----------------------------------------------
    # 2020-11-15: In addition to some of the libraries above, I found
    # (aka discovered through make after make after make trial-and-error)
    # that I needed these libraries to build v3.10. Not sure about v4.2.
    # But can't hurt to keep; while discarding might break the build (any
    # I wouldn't find out until I ran this task on a new host, which could
    # be a while).
    - libdbd-freetds
    - libqt5x11extras5-dev
    - libxmu-dev
    - qt5-qmake

# ***

- set_fact:
    GNUCASH_BUILD_DIR: "{{ zoidy_homefries_gnucash_repo_path }}/../build-gnucash-{{ GNUCASH_BRANCH }}"

- name: gnucash » ensure build directory exists
  file: path={{ GNUCASH_BUILD_DIR }} state=directory

# Enable GnuCash Python binding (`import gnucash`) with -DWITH_PYTHON=ON.
- name: Build gnucash application
  ansible.builtin.shell: cmake -DCMAKE_INSTALL_PREFIX="{{ ansible_env.HOME }}/.local" -DWITH_PYTHON=ON ../gnucash
  args:
    chdir: "{{ GNUCASH_BUILD_DIR }}"

# ***

- name: "gnucash make"
  make:
    chdir: "{{ GNUCASH_BUILD_DIR }}"

- name: "gnucash make install"
  make:
    chdir: "{{ GNUCASH_BUILD_DIR }}"
    target: install

# ***

- name: Setup Preferred GnuCash Preferences
  community.general.dconf:
    key: "/org/gnucash/{{ item.key }}"
    value: "{{ item.val }}"
    state: present
  loop:

    # Edit > Preferences > Register Defaults > Default Style
    # - One of: Basic ledger / Auto-split ledger / Transaction Journal
    # - Set one of these 'true' and the other two 'false'.
    # Same with this, but I can't tell to which control this corresponds.
    - key: "general/register/default-style-ledger"
      val: "false"
    # So that you don't have to click the Split button all the time.
    # - Useful if you normally click transactions to edit their splits.
    - key: "general/register/default-style-autoledger"
      val: "true"
    # Sometimes I like it when all splits are expanded (Transaction Journal
    # style), 2021-03-14 19:25: but currently I think I still like auto-split
    # behavior for most accounts.
    - key: "general/register/default-style-journal"
      val: "false"

    # Edit > Preferences > Register Defaults > ✓ Only display leaf account names
    # - 2021-01-09 23:49: Trying this now. Not sure why I didn't do sooner,
    #   my long account names makes 'em hard to read quickly.
    - key: "general/register/show-leaf-account-names"
      val: "true"
    # - I first set
    #     Edit > Preferences > Accounts > Separator Character > Character: »
    #   which helped a little, and the short name works better, I think.
    # 2021-03-13: The sep. on my machine is back to ':', did I do that?
    #             - Probably for Birds Eye.
    #  - key: "general/account-separator"
    #    val: "»"

    # Edit > Preferences > Register > ✓ Use GnuCash built-in color theme
    # - Enable this option to use a light green background on transaction
    #   rows, and beige on split backgrounds. When off, they're all white.
    - key: "general/register/use-gnucash-color-theme"
      val: "true"

    # Edit > Preferences > Numbers, Date, Time > Date Format: *ISO    2013-07-31*
    # 2021-03-13: How'd I miss this setting until now.
    - key: "general/date-format"
      val: "3"

    # Edit > Preferences > General > Retain log/backup files > ✓ Never
    # 2021-03-13: I mostly import data, and don't make a lot of edits or
    # new transactions in the application. So I'm diligent about saving
    # (and committing to a repo) so I don't feel the need for this file
    # noise (I've never needed/used a GNC log file).
    - key: "general/retain-type-never"
      val: "true"

    # Edit > Preferences > Import > QIF Import > ✗ Show documentation
    # SPIKE/2021-03-13: Will this cut down on Wizard screens?
    - key: "dialogs/import/qif/show-doc"
      val: "false"

    # Edit > Preferences > Business > Invoices > Notify when due > Days in advance
    # 2021-03-22: Defaults to 7, lowest is 1.
    # - (lb): I set this to 1. I don't quite get why GNC uses a week. Like,
    #   if the client still has a week to pay, what's the purpose of the
    #   alert? So I can prod the client to pay? But why would I want to do
    #   that, if they still have another week to pay? / In my case, all my
    #   clients pay like clockwork, about 1 week before the technical due
    #   date. So the GnuCash alert -- to me -- only serves to remind me to
    #   update my books (import recent bank transactions into GnuCash, and
    #   assign payments to invoices).
    - key: "dialogs/business/invoice/days-in-advance"
      val: "1.0"

    # MANUAL/2021-03-13 20:12: See also: View: ✗ Summary Bar
    # to hide the Summary bar (though I don't see a dconf setting for it).
    # - At least for my business books the Summary bar has useless or
    #   incorrect data in it... but that's probably because I've got my
    #   accounts set up unconventionally (because I'm not an accountant!).

  # 2021-03-13: All settings I see on dump.
  #
  #   [/]
  #   summarybar-position-top=false
  #   retain-type-never=true
  #   show-account-color=true
  #   date-completion-thisyear=false
  #   migrate-prefs-done=true
  #   show-account-color-tabs=true
  #   account-separator=':'
  #   reversed-accounts-none=false
  #   autosave-interval-minutes=0.0
  #   grid-lines-horizontal=false
  #   date-format=3
  #   retain-type-days=false
  #   use-accounting-labels=false
  #   autosave-show-explanation=false
  #   prefs-version=402
  #
  #   [finance-quote]
  #   alphavantage-api-key='...'
  #
  #   [register]
  #   use-gnucash-color-theme=true
  #   show-leaf-account-names=true
  #   default-style-autoledger=true
  #   default-style-ledger=false
  #
  #   [report]
  #   currency-choice-other=false

