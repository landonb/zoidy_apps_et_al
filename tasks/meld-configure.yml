---

# MAYBE/2023-04-26 13:42: Move to apps-et-al

# CXREF/2023-04-21: meld is installed via Flatpak:
#
#   ~/.kit/ansible/roles/zoidy_mintyfresh/tasks/install-flatpaks.yml

# MAYBE/2018-12-24: Fiddle with style.
# ::
#
#   [org/gnome/meld]
#   style-scheme='meld-base'
#   wrap-mode='none'
#
#   gsettings:
#     org.gnome.meld style-scheme 'meld-base'
#     org.gnome.meld style-scheme 'classic'  # default

# SAVVY/2023-05-18: If meld is installed from apt, use the normal
# gsettings command, e.g.,
#
#   ansible.builtin.shell: gsettings set {{ item.schema }} {{ item.key }} {{ item.val }}
#
# But now that meld comes from flatpak, we need to change the flatpak
# settings, e.g.,
#
#   ansible.builtin.shell: flatpak run --command=gsettings <flatpak ID> set <...>
#
# https://lists.freedesktop.org/archives/flatpak/2020-October/002046.html
#
# - CXREF: Meld is installed by another role:
#
#     ~/.kit/ansible/roles/zoidy_mintyfresh/tasks/install-flatpaks.yml

# SAVVY/2023-05-18: No need to restart meld for changes to apply.

- name: Configure Meld
  ansible.builtin.shell: flatpak run --command=gsettings org.gnome.meld set {{ item.schema }} {{ item.key }} {{ item.val }}
  loop:

    - schema: org.gnome.meld
      key: use-system-font
      # Default: "true"
      val: "false"

    - schema: org.gnome.meld
      key: custom-font
      # Default "'monospace, 14'"
      val: "'Hack 10'"

    - schema: org.gnome.meld
      key: highlight-current-line
      # Default: "false"
      val: "true"

    - schema: org.gnome.meld
      key: show-line-numbers
      # Default: "false"
      val: "true"

    - schema: org.gnome.meld
      key: indent-width
      # Default: "8"
      val: "4"

    - schema: org.gnome.meld
      key: insert-spaces-instead-of-tabs
      # Default: "false"
      val: "true"

    - schema: org.gnome.meld
      key: filename-filters
      # Default: "\"[('Backups', true, '#*# .#* ~* *~ *.{orig,bak,swp}'), ('OS-specific metadata', true, '.DS_Store ._* .Spotlight-V100 .Trashes Thumbs.db Desktop.ini'), ('Version Control', true, '_MTN .bzr .svn .svn .hg .fslckout _FOSSIL_ .fos CVS _darcs .git .svn .osc'), ('Binaries', true, '*.{pyc,a,obj,o,so,la,lib,dll,exe}'), ('Media', false, '*.{jpg,gif,png,bmp,wav,mp3,ogg,flac,avi,mpg,xcf,xpm}')]\""
      val: "\"[('Backups', true, '#*# .#* ~* *~ *.{orig,bak,swp}'), ('OS-specific metadata', true, '.DS_Store ._* .Spotlight-V100 .Trashes Thumbs.db Desktop.ini'), ('Version Control', true, '_MTN .bzr .svn .svn .hg .fslckout _FOSSIL_ .fos CVS _darcs .git .svn .osc'), ('Binaries', true, '*.{pyc,a,obj,o,so,la,lib,dll,exe}'), ('Media', false, '*.{jpg,gif,png,bmp,wav,mp3,ogg,flac,avi,mpg,xcf,xpm}'), ('Python build', true, '.make.out *.mo .tox _build dist htmlcov'), ('Trust Me! CI', true, '.trustme.kill .trustme.lock .trustme.log'), ('Python bytecode', true, '__pycache__ .pytest_cache *.egg-info'), ('tags', true, 'tags'), ('Python CI', true, '.coverage coverage.xml'), ('NodeJS', true, 'node_modules'), ('Python virtualenv', true, '.editable .venv*'), ('Developer cruft', true, 'TBD*')]\""

